'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSnapshot = createSnapshot;
exports.extractRefs = extractRefs;
exports.callOnceWithArg = callOnceWithArg;
exports.walkGet = walkGet;
exports.walkSet = walkSet;

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createSnapshot(doc) {
  // defaults everything to false, so no need to set
  return Object.defineProperty(doc.data(), 'id', {
    value: doc.id
  });
}

const isObject = o => o && typeof o === 'object';
const isTimestamp = o => o.toDate;
const isRef = o => o && o.onSnapshot;

function extractRefs(doc, oldDoc, path = '', result = [{}, {}]) {
  // must be set here because walkGet can return null or undefined
  oldDoc = oldDoc || {};
  const idDescriptor = Object.getOwnPropertyDescriptor(doc, 'id');
  if (idDescriptor && !idDescriptor.enumerable) {
    Object.defineProperty(result[0], 'id', idDescriptor);
  }
  return Object.keys(doc).reduce((tot, key) => {
    const ref = doc[key];
    // if it's a ref
    if (isRef(ref)) {
      tot[0][key] = oldDoc[key] || ref.path;
      tot[1][path + key] = ref;
    } else if (Array.isArray(ref)) {
      tot[0][key] = Array(ref.length).fill(null);
      extractRefs(ref, oldDoc[key], path + key + '.', [tot[0][key], tot[1]]);
    } else if (ref == null ||
    // Firestore < 4.13
    ref instanceof Date || isTimestamp(ref) || ref.longitude && ref.latitude // GeoPoint
    ) {
        tot[0][key] = ref;
      } else if (isObject(ref)) {
      tot[0][key] = {};
      extractRefs(ref, oldDoc[key], path + key + '.', [tot[0][key], tot[1]]);
    } else {
      tot[0][key] = ref;
    }
    return tot;
  }, result);
}

function callOnceWithArg(fn, argFn) {
  let called;
  return () => {
    if (!called) {
      called = true;
      return fn(argFn());
    }
  };
}

function walkGet(obj, path) {
  return path.split('.').reduce((target, key) => target[key], obj);
}

function walkSet(obj, path, value) {
  // path can be a number
  const keys = ('' + path).split('.');
  const key = keys.pop();
  const target = keys.reduce((target, key) => target[key], obj);
  // global isFinite is different from Number.isFinite
  // it converts values to numbers
  if (isFinite(key)) target.splice(key, 1, value);else _vue2.default.set(target, key, value);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJjcmVhdGVTbmFwc2hvdCIsImV4dHJhY3RSZWZzIiwiY2FsbE9uY2VXaXRoQXJnIiwid2Fsa0dldCIsIndhbGtTZXQiLCJkb2MiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImRhdGEiLCJ2YWx1ZSIsImlkIiwiaXNPYmplY3QiLCJvIiwiaXNUaW1lc3RhbXAiLCJ0b0RhdGUiLCJpc1JlZiIsIm9uU25hcHNob3QiLCJvbGREb2MiLCJwYXRoIiwicmVzdWx0IiwiaWREZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImtleXMiLCJyZWR1Y2UiLCJ0b3QiLCJrZXkiLCJyZWYiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJmaWxsIiwiRGF0ZSIsImxvbmdpdHVkZSIsImxhdGl0dWRlIiwiZm4iLCJhcmdGbiIsImNhbGxlZCIsIm9iaiIsInNwbGl0IiwidGFyZ2V0IiwicG9wIiwiaXNGaW5pdGUiLCJzcGxpY2UiLCJWdWUiLCJzZXQiXSwibWFwcGluZ3MiOiI7Ozs7O1FBRWdCQSxjLEdBQUFBLGM7UUFXQUMsVyxHQUFBQSxXO1FBa0NBQyxlLEdBQUFBLGU7UUFVQUMsTyxHQUFBQSxPO1FBSUFDLE8sR0FBQUEsTzs7QUE3RGhCOzs7Ozs7QUFFTyxTQUFTSixjQUFULENBQXlCSyxHQUF6QixFQUE4QjtBQUNuQztBQUNBLFNBQU9DLE9BQU9DLGNBQVAsQ0FBc0JGLElBQUlHLElBQUosRUFBdEIsRUFBa0MsSUFBbEMsRUFBd0M7QUFDN0NDLFdBQU9KLElBQUlLO0FBRGtDLEdBQXhDLENBQVA7QUFHRDs7QUFFRCxNQUFNQyxXQUFXQyxLQUFLQSxLQUFLLE9BQU9BLENBQVAsS0FBYSxRQUF4QztBQUNBLE1BQU1DLGNBQWNELEtBQUtBLEVBQUVFLE1BQTNCO0FBQ0EsTUFBTUMsUUFBUUgsS0FBS0EsS0FBS0EsRUFBRUksVUFBMUI7O0FBRU8sU0FBU2YsV0FBVCxDQUFz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YjtBQUNBLFFBQU1iLE1BQU1ILEtBQUtrQixHQUFMLEVBQVo7QUFDQSxRQUFNRCxTQUFTakIsS0FBS0MsTUFBTCxDQUFZLENBQUNnQixNQUFELEVBQVNkLEdBQVQsS0FBaUJjLE9BQU9kLEdBQVAsQ0FBN0IsRUFBMENZLEdBQTFDLENBQWY7QUFDQTtBQUNBO0FBQ0EsTUFBSUksU0FBU2hCLEdBQVQsQ0FBSixFQUFtQmMsT0FBT0csTUFBUCxDQUFjakIsR0FBZCxFQUFtQixDQUFuQixFQUFzQmpCLEtBQXRCLEVBQW5CLEtBQ0ttQyxjQUFJQyxHQUFKLENBQVFMLE1BQVIsRUFBZ0JkLEdBQWhCLEVBQXFCakIsS0FBckI7QUFDTiIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNuYXBzaG90IChkb2MpIHtcclxuICAvLyBkZWZhdWx0cyBldmVyeXRoaW5nIHRvIGZhbHNlLCBzbyBubyBuZWVkIHRvIHNldFxyXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jLmRhdGEoKSwgJ2lkJywge1xyXG4gICAgdmFsdWU6IGRvYy5pZCxcclxuICB9KVxyXG59XHJcblxyXG5jb25zdCBpc09iamVjdCA9IG8gPT4gbyAmJiB0eXBlb2YgbyA9PT0gJ29iamVjdCdcclxuY29uc3QgaXNUaW1lc3RhbXAgPSBvID0+IG8udG9EYXRlXHJcbmNvbnN0IGlzUmVmID0gbyA9PiBvICYmIG8ub25TbmFwc2hvdFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGV4dHJhY3RSZWZzIChkb2MsIG9sZERvYywgcGF0aCA9ICcnLCByZXN1bHQgPSBbe30sIHt9XSkge1xyXG4gIC8vIG11c3QgYmUgc2V0IGhlcmUgYmVjYXVzZSB3YWxrR2V0IGNhbiByZXR1cm4gbnVsbCBvciB1bmRlZmluZWRcclxuICBvbGREb2MgPSBvbGREb2MgfHwge31cclxuICBjb25zdCBpZERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGRvYywgJ2lkJylcclxuICBpZiAoaWREZXNjcmlwdG9yICYmICFpZERlc2NyaXB0b3IuZW51bWVyYWJsZSkge1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc3VsdFswXSwgJ2lkJywgaWREZXNjcmlwdG9yKVxyXG4gIH1cclxuICByZXR1cm4gT2JqZWN0LmtleXMoZG9jKS5yZWR1Y2UoKHRvdCwga2V5KSA9PiB7XHJcbiAgICBjb25zdCByZWYgPSBkb2Nba2V5XVxyXG4gICAgLy8gaWYgaXQncyBhIHJlZlxyXG4gICAgaWYgKGlzUmVmKHJlZikpIHtcclxuICAgICAgdG90WzBdW2tleV0gPSBvbGREb2Nba2V5XSB8fCByZWYucGF0aFxyXG4gICAgICB0b3RbMV1bcGF0aCArIGtleV0gPSByZWZcclxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZWYpKSB7XHJcbiAgICAgIHRvdFswXVtrZXldID0gQXJyYXkocmVmLmxlbmd0aCkuZmlsbChudWxsKVxyXG4gICAgICBleHRyYWN0UmVmcyhyZWYsIG9sZERvY1trZXldLCBwYXRoICsga2V5ICsgJy4nLCBbdG90WzBdW2tleV0sIHRvdFsxXV0pXHJcbiAgICB9IGVsc2UgaWYgKFxyXG4gICAgICByZWYgPT0gbnVsbCB8fFxyXG4gICAgICAvLyBGaXJlc3RvcmUgPCA0LjEzXHJcbiAgICAgIHJlZiBpbnN0YW5jZW9mIERhdGUgfHxcclxuICAgICAgaXNUaW1lc3RhbXAocmVmKSB8fFxyXG4gICAgICAocmVmLmxvbmdpdHVkZSAmJiByZWYubGF0aXR1ZGUpIC8vIEdlb1BvaW50XHJcbiAgICApIHtcclxuICAgICAgdG90WzBdW2tleV0gPSByZWZcclxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QocmVmKSkge1xyXG4gICAgICB0b3RbMF1ba2V5XSA9IHt9XHJcbiAgICAgIGV4dHJhY3RSZWZzKHJlZiwgb2xkRG9jW2tleV0sIHBhdGggKyBrZXkgKyAnLicsIFt0b3RbMF1ba2V5XSwgdG90WzFdXSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRvdFswXVtrZXldID0gcmVmXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90XHJcbiAgfSwgcmVzdWx0KVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2FsbE9uY2VXaXRoQXJnIChmbiwgYXJnRm4pIHtcclxuICBsZXQgY2FsbGVkXHJcbiAgcmV0dXJuICgpID0+IHtcclxuICAgIGlmICghY2FsbGVkKSB7XHJcbiAgICAgIGNhbGxlZCA9IHRydWVcclxuICAgICAgcmV0dXJuIGZuKGFyZ0ZuKCkpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2Fsa0dldCAob2JqLCBwYXRoKSB7XHJcbiAgcmV0dXJuIHBhdGguc3BsaXQoJy4nKS5yZWR1Y2UoKHRhcmdldCwga2V5KSA9PiB0YXJnZXRba2V5XSwgb2JqKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gd2Fsa1NldCAob2JqLCBwYXRoLCB2YWx1ZSkge1xyXG4gIC8vIHBhdGggY2FuIGJlIGEgbnVtYmVyXHJcbiAgY29uc3Qga2V5cyA9ICgnJyArIHBhdGgpLnNwbGl0KCcuJylcclxuICBjb25zdCBrZXkgPSBrZXlzLnBvcCgpXHJcbiAgY29uc3QgdGFyZ2V0ID0ga2V5cy5yZWR1Y2UoKHRhcmdldCwga2V5KSA9PiB0YXJnZXRba2V5XSwgb2JqKVxyXG4gIC8vIGdsb2JhbCBpc0Zpbml0ZSBpcyBkaWZmZXJlbnQgZnJvbSBOdW1iZXIuaXNGaW5pdGVcclxuICAvLyBpdCBjb252ZXJ0cyB2YWx1ZXMgdG8gbnVtYmVyc1xyXG4gIGlmIChpc0Zpbml0ZShrZXkpKSB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsdWUpXHJcbiAgZWxzZSBWdWUuc2V0KHRhcmdldCwga2V5LCB2YWx1ZSlcclxufVxyXG4iXX0=